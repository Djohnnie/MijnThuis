@using MijnThuis.Dashboard.Web.Notifications

@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIcon Icon="@Icons.Material.Filled.Home" Color="Color.Inherit" />
        <MudText Typo="Typo.h5" Class="ml-3">Mijn Thuis</MudText>
        <MudSpacer />
        <MudIconButton @onclick="SpeechToText" Color="Color.Inherit" Icon="@Icons.Material.Filled.Mic" />
        <MudIconButton @onclick="ToggleDarkMode" Color="Color.Inherit" Icon="@modeIcon" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    [Inject] private SpeechToTextNotificationService _sttService { get; set; }

    MudTheme _theme = new();
    MudThemeProvider _mudThemeProvider = new MudThemeProvider();
    string modeIcon => _isDarkMode ? @Icons.Material.Outlined.DarkMode : @Icons.Material.Outlined.LightMode;
    bool _isDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();

            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);

            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;

        StateHasChanged();

        return Task.CompletedTask;
    }

    void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
    }

    void SpeechToText()
    {
        _sttService.NotifyEventClick(this);
    }
}