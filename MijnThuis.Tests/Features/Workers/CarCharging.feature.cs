// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MijnThuis.Tests.Features.Workers
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CarChargingWorkerFeature : object, Xunit.IClassFixture<CarChargingWorkerFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Workers", "Car Charging Worker", @"A worker that runs in the background continuesly and checks if a car is connected to the charger at home.
If a car is connected, the worker will start charging the car, but only if the home battery is charged enough,
and if there is enough solar energy available to charge the car.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CarCharging.feature"
#line hidden
        
        public CarChargingWorkerFeature(CarChargingWorkerFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The car is not connected to the charger")]
        [Xunit.TraitAttribute("FeatureTitle", "Car Charging Worker")]
        [Xunit.TraitAttribute("Description", "The car is not connected to the charger")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public async System.Threading.Tasks.Task TheCarIsNotConnectedToTheCharger()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The car is not connected to the charger", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
 await testRunner.GivenAsync("The car charge port is not open", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.WhenAsync("The worker runs a check", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("The worker should have checked the car charge port", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
 await testRunner.AndAsync("The car should not be ready to charge", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The car is not located at home")]
        [Xunit.TraitAttribute("FeatureTitle", "Car Charging Worker")]
        [Xunit.TraitAttribute("Description", "The car is not located at home")]
        public async System.Threading.Tasks.Task TheCarIsNotLocatedAtHome()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The car is not located at home", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.GivenAsync("The car is parked at \"Work\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
 await testRunner.WhenAsync("The worker runs a check", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
 await testRunner.ThenAsync("The worker should have checked the car location", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
 await testRunner.AndAsync("The car should not be ready to charge", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The car is connected to the charger, but the home battery is not charged enough")]
        [Xunit.TraitAttribute("FeatureTitle", "Car Charging Worker")]
        [Xunit.TraitAttribute("Description", "The car is connected to the charger, but the home battery is not charged enough")]
        public async System.Threading.Tasks.Task TheCarIsConnectedToTheChargerButTheHomeBatteryIsNotChargedEnough()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The car is connected to the charger, but the home battery is not charged enough", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
 await testRunner.GivenAsync("The car is parked at \"Thuis\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
 await testRunner.AndAsync("The car charge port is open", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.AndAsync("The home battery is charged to 94%", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
 await testRunner.WhenAsync("The worker runs a check", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("The worker should have checked the car charge port", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
 await testRunner.AndAsync("The worker should have checked the car location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.AndAsync("The worker should have checked the home battery", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
 await testRunner.AndAsync("The car should not be ready to charge", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CarChargingWorkerFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CarChargingWorkerFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
